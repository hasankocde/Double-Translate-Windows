main.ts (1-1)


// main.ts

import path from 'path';
import {
  app,
  BrowserWindow,
  shell,
  ipcMain,
  Menu,
  Tray,
  nativeImage,
  clipboard,
  IpcMainEvent,
} from 'electron';
import log from 'electron-log';
import axios from 'axios';
import os from 'os';
import { autoUpdater } from 'electron-updater';
import Store from 'electron-store';
import { resolveHtmlPath } from './util';

interface StoreSchema {
  shortcut: string;
  shortcut_prefix: string;
  keep_in_background: boolean;
  auto_start: boolean;
  run_in_background: boolean;
  isClipboardMonitoringActive: boolean; // Pano izleme durumu için eklendi
}

const store = new Store<StoreSchema>({
  schema: {
    shortcut: {
      type: 'string',
      default: 'q',
    },
    shortcut_prefix: {
      type: 'string',
      default: os.platform() === 'darwin' ? 'option' : 'alt',
    },
    keep_in_background: {
      type: 'boolean',
      default: true,
    },
    auto_start: {
      type: 'boolean',
      default: false,
    },
    run_in_background: {
      type: 'boolean',
      default: true,
    },
    isClipboardMonitoringActive: {
      type: 'boolean',
      default: true, // Varsayılan olarak pano izleme etkin
    },
  },
});

class AppUpdater {
  constructor() {
    log.transports.file.level = 'info';
    autoUpdater.logger = log;
    autoUpdater.checkForUpdatesAndNotify();
  }
}

let mainWindow: BrowserWindow | null = null;
let tray: Tray | null = null;

// Clipboard izleme için değişkenler
let previousClipboardText = '';
let lastFocusTime = 0; // Son odaklanma zamanı
let isClipboardMonitoringActive = store.get('isClipboardMonitoringActive'); // Pano izleme durumu

// Clipboard izleme fonksiyonu
function checkClipboardForChange() {
  if (!isClipboardMonitoringActive) return; // Eğer izleme aktif değilse fonksiyondan çık
  const text = clipboard.readText();
  if (text && text !== previousClipboardText) {
    previousClipboardText = text;
    mainWindow?.webContents.send('clipboard-text', text);

    const now = Date.now();
    if (now - lastFocusTime < 1000) {
      return; // 1 saniyeden daha sık odaklanmayı engeller
    }
    lastFocusTime = now;

    // Uygulamayı öne getir ve göster
    if (mainWindow) {
      if (!mainWindow.isVisible()) {
        mainWindow.show();
      } else if (mainWindow.isMinimized()) {
        mainWindow.restore();
      }
      if (!mainWindow.isFocused()) {
        mainWindow.focus();
      }
    }
  }
}

// Bağlam menüsü için IPC dinleyicisi
ipcMain.on(
  'show-context-menu',
  (event: IpcMainEvent, x: number, y: number) => {
    const template: Electron.MenuItemConstructorOptions[] = [
      { role: 'undo' },
      { role: 'redo' },
      { type: 'separator' },
      { role: 'cut' },
      { role: 'copy' },
      { role: 'paste' },
      { role: 'delete' },
      { type: 'separator' },
      { role: 'selectAll' },
    ];
    const menu = Menu.buildFromTemplate(template);
    const win = BrowserWindow.fromWebContents(event.sender);
    if (win) {
      menu.popup({ window: win, x, y });
    }
  }
);

ipcMain.handle(
  'translate',
  async (event, text: string, targetLangs: string[]) => {
    try {
      const translatedTexts = await Promise.all(
        targetLangs.map((targetLang: string) =>
          translateText(text, targetLang)
        )
      );

      return ['success', ...translatedTexts];
    } catch (error) {
      console.error('Translation error:', error);
      return ['error', 'Translation failed.'];
    }
  }
);

async function translateText(
  text: string,
  targetLanguage: string
): Promise<string> {
  try {
    const url = 'https://translate.googleapis.com/translate_a/single';
    const params = {
      client: 'gtx',
      sl: 'auto',
      tl: targetLanguage,
      dt: 't',
      q: text,
    };

    const response = await axios.get(url, { params });

    const translations = response.data[0];
    let translatedText = '';

    translations.forEach((translation: any) => {
      translatedText += translation[0];
    });

    return translatedText;
  } catch (error: any) {
    console.error('Translation error:', error);
    return `Translation failed: ${error.message}`;
  }
}

ipcMain.on('settings', async (event, arg) => {
  const type = arg[0];
  if (type === 'get') {
    const items = arg[1];
    const res: any[] = [];
    items.forEach((item: keyof StoreSchema) => res.push(store.get(item)));
    event.reply('settings', res);
  } else if (type === 'set') {
    const key = arg[1][0] as keyof StoreSchema;
    const value = arg[1][1];
    if (value !== undefined) {
      store.set(key, value);
    }
    if (key === 'shortcut' || key === 'shortcut_prefix') {
      // Kısayol artık kullanılmadığı için işlem yapmıyoruz
    } else if (key === 'auto_start') {
      updateAutoStart();
    }
  }
});

const isDebug =
  process.env.NODE_ENV === 'development' || process.env.DEBUG_PROD === 'true';

if (isDebug) {
  require('electron-debug')({ showDevTools: false });
}

const installExtensions = async () => {
  const installer = require('electron-devtools-installer');
  const forceDownload = !!process.env.UPGRADE_EXTENSIONS;
  const extensions = ['REACT_DEVELOPER_TOOLS'];

  return installer
    .default(
      extensions.map((name: string) => installer[name]),
      forceDownload
    )
    .catch(console.log);
};

const getAssetPath = (...paths: string[]): string => {
  const RESOURCES_PATH = app.isPackaged
    ? path.join(process.resourcesPath, 'assets')
    : path.join(__dirname, '../../assets');
  return path.join(RESOURCES_PATH, ...paths);
};

function createTray() {
  const icon = getAssetPath('icon.png'); // Gerekli
  const trayIcon = nativeImage.createFromPath(icon);
  tray = new Tray(trayIcon.resize({ width: 16 }));
  const contextMenu = Menu.buildFromTemplate([
    {
      label: 'Show',
      click: () => {
        mainWindow?.show();
      },
    },

    {
      label: 'Quit',
      click: () => {
        mainWindow?.removeAllListeners();
        app.quit();
      },
    },
  ]);

  tray.setContextMenu(contextMenu);
}

const createWindow = async () => {
  if (isDebug) {
    await installExtensions();
  }

  if (!tray) {
    createTray();
  }

  const defaultW = 300; // Genişlik
  const defaultH = 500; // Yükseklik

  mainWindow = new BrowserWindow({
    show: false,
    width: defaultW,
    height: defaultH,
    icon: getAssetPath('icon.png'),
    alwaysOnTop: false, // Başlangıçta false, sonradan değiştirilebilir
    webPreferences: {
      devTools: !app.isPackaged,
      preload: app.isPackaged
        ? path.join(__dirname, 'preload.js')
        : path.join(__dirname, '../../.erb/dll/preload.js'),
      contextIsolation: true,
      nodeIntegration: false,
    },
    frame: true,
  });

  mainWindow.setMenu(null);
  mainWindow.loadURL(resolveHtmlPath('index.html'));

  mainWindow.on('ready-to-show', () => {
    if (!mainWindow) {
      throw new Error('"mainWindow" is not defined');
    }
    if (process.env.START_MINIMIZED) {
      mainWindow.minimize();
    } else {
      mainWindow.show();
    }
  });

  mainWindow.webContents.on('dom-ready', () => {
    mainWindow?.setSize(defaultW, defaultH);
  });

  mainWindow.on('close', (event) => {
    if (store.get('run_in_background') === true) {
      event.preventDefault();
      mainWindow?.hide();
    }
  });

  mainWindow.webContents.on('will-navigate', (e, url) => {
    e.preventDefault();
    shell.openExternal(url);
  });

  // Başlık çubuğunda sağ tıklama ile özel menü gösterme
  mainWindow.on('system-context-menu', (event) => {
    event.preventDefault(); // Varsayılan bağlam menüsünü engelle
    const titleBarContextMenu = Menu.buildFromTemplate([
      {
        label: 'Always on Top',
        type: 'checkbox',
        checked: mainWindow?.isAlwaysOnTop(),
        click: () => {
          const isOnTop = !mainWindow?.isAlwaysOnTop();
          mainWindow?.setAlwaysOnTop(isOnTop);
        },
      },
      {
        label: 'Dont jump with ctrl+c', // Yeni seçenek
        type: 'checkbox',
        checked: !isClipboardMonitoringActive, // Eğer izleme aktif değilse işaretli olacak
        click: () => {
          isClipboardMonitoringActive = !isClipboardMonitoringActive;
          store.set('isClipboardMonitoringActive', isClipboardMonitoringActive);
        },
      },
    ]);

    // Özel bağlam menüsünü fare pozisyonunda göster
    titleBarContextMenu.popup({ window: mainWindow! });
  });
};

function updateAutoStart() {
  app.setLoginItemSettings({
    openAtLogin: store.get('auto_start'),
    path: app.getPath('exe'),
  });
}

const startApp = async () => {
  await app.whenReady();

  if (os.platform() === 'darwin') {
    store.set('shortcut_prefix', 'option');
  }

  // Global kısayol artık kullanılmıyor
  // registerShortcut();
  // registerGlobalHotkey();

  await createWindow();

  // Pano izleme işlemini ekleyin
  setInterval(checkClipboardForChange, 1000); // 1 saniyelik aralıklarla kontrol eder

  app.on('activate', () => {
    if (mainWindow === null) createWindow();
  });
};

startApp().catch(console.log);

app.on('ready', () => {
  updateAutoStart();
});

// Uygulama kapanırken tüm global kısayolları kaldırma (artık yok)
app.on('will-quit', () => {
  // globalShortcut.unregisterAll(); // Artık kısayol yok
});

app.on('before-quit', () => {
  mainWindow?.removeAllListeners('close');
  mainWindow = null;
});


